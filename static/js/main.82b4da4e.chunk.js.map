{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Score","total","status","App","state","Pics","clickedPicIds","score","goal","includes","setState","push","length","i","j","Math","floor","random","this","map","picture","key","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0yBAWeA,G,MAPF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,4BACX,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,GAAIN,EAAMM,GAChDC,QAAS,kBAAMP,EAAMQ,iBAAiBR,EAAMM,KAAKL,UAAU,oBCDpDQ,G,MAFC,SAAAT,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMU,YCQ1CC,G,MAPD,SAAAX,GAAK,OACjB,yBAAKC,UAAU,aACb,wBAAIA,UAAU,SAAd,UAA8BD,EAAMY,OACpC,wBAAIX,UAAU,UAAUD,EAAMa,W,OCiEnBC,G,kNAhEbC,MAAQ,CACNC,OACAC,cAAe,GACfC,MAAO,EACPC,KAAM,GACNN,OAAQ,I,EAGVL,iBAAmB,SAAAF,GACjB,IAAIW,EAAgB,EAAKF,MAAME,cAE/B,GAAGA,EAAcG,SAASd,GACxB,EAAKe,SAAS,CAAEJ,cAAe,GAAIC,MAAO,EAAGL,OAAS,kEAKtD,GAFAI,EAAcK,KAAKhB,GAES,KAAzBW,EAAcM,OAAjB,CAKA,EAAKF,SAAS,CAAEL,OAAMC,gBAAeC,MAAOD,EAAcM,OAAQV,OAAQ,MAE1E,IAAK,IAAIW,EAAIR,EAAKO,OAAS,EAAGC,EAAI,EAAGA,IAAK,CACxC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADA,EAEnB,CAACR,EAAKS,GAAIT,EAAKQ,IAAnCR,EAAKQ,GAFkC,KAE9BR,EAAKS,GAFyB,WANxC,EAAKJ,SAAS,CAACH,MAAO,GAAIL,OAAQ,qEAAsEI,cAAe,M,uDAcnH,IAAD,OACP,OACE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,aAAb,sEAIF,kBAAC,EAAD,CAAOW,MAAOiB,KAAKd,MAAMG,MAClBC,KAAM,EACNN,OAAQgB,KAAKd,MAAMF,SAE1B,kBAAC,EAAD,KACGgB,KAAKd,MAAMC,KAAKc,KAAI,SAAAC,GAAO,OAC1B,kBAAC,EAAD,CACEvB,iBAAkB,EAAKA,iBACvBF,GAAIyB,EAAQzB,GACZ0B,IAAKD,EAAQzB,GACbD,MAAO0B,EAAQ1B,YAIrB,4BAAQJ,UAAU,cAChB,8DACA,uBAAGgC,KAAK,6BAA6BC,OAAO,GAAGC,IAAI,IAAnD,uBADA,W,GA1DQC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82b4da4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n\r\nconst Card = props => (\r\n  <div className=\"card img-container hover\">\r\n      <img alt={props.name} src={props.image} id={props.id}\r\n        onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore'/>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Score.css\";\r\n\r\n\r\n//stateless component\r\nconst Score = props => (\r\n  <div className=\"gameScore\">\r\n    <h3 className=\"score\">Score: {props.total}</h3>\r\n    <h3 className=\"status\">{props.status}</h3>\r\n  </div>\r\n);\r\n\r\nexport default Score;\r\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport Pics from \"./travel.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n \n  state = {\n    Pics,\n    clickedPicIds: [],\n    score: 0,\n    goal: 10,\n    status: \"\"\n  };\n\n  shuffleScoreCard = id => {\n    let clickedPicIds = this.state.clickedPicIds;\n\n    if(clickedPicIds.includes(id)){\n      this.setState({ clickedPicIds: [], score: 0, status:  \"You have the memory of an insect. Click to play again...\" });\n      return;\n    }else{\n      clickedPicIds.push(id)\n\n      if(clickedPicIds.length === 10){\n        this.setState({score: 10, status: \"Congrats! You have the memory of an Elephant. Click to play again!\", clickedPicIds: []});\n        return;\n      }\n\n      this.setState({ Pics, clickedPicIds, score: clickedPicIds.length, status: \" \" });\n\n      for (let i = Pics.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [Pics[i], Pics[j]] = [Pics[j], Pics[i]];\n      }\n    }\n  }\n\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Travel Memory Game</h1>\n          <p className=\"App-intro\">\n            Try not to click the same image twice...Click any image to begin!\n            </p>\n        </header>\n        <Score total={this.state.score}\n               goal={8}\n               status={this.state.status}\n               />\n        <Wrapper>\n          {this.state.Pics.map(picture => (\n            <Card\n              shuffleScoreCard={this.shuffleScoreCard}\n              id={picture.id}\n              key={picture.id}\n              image={picture.image}\n            />\n          ))}\n        </Wrapper>\n        <footer className=\"App-footer\">\n          <p>For more projects, please visit:\n          <a href=\"https://matthewbbowler.com\" target=\"\" rel=\"\"> matthewbbowler.com</a>.</p>\n        </footer>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}